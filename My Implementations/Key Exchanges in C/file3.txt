--- jintailwe.c	2018-05-20 20:25:44.000000000 +0100
+++ jintailwe-v2.c	2018-05-20 20:28:48.000000000 +0100
@@ -20,7 +20,8 @@
 #include <time.h>
 #include <stdbool.h>
 #include <math.h>
-
+#include <iostream>
+using namespace std;
 #include "jintailwe.h"
 
 /*-----------------------------Global Variables-------------------------------*/
@@ -44,14 +45,9 @@
 
   for(i = 0; i < LATTICE_DIMENSION;i++){
     for(j = 0; j < LATTICE_DIMENSION; j++){
-      pA[i] = pA[i] + (M[i][j]*sA[j] + 2*eA[j]);
-    }
-    if(pA[i] < 0){
-      pA[i] = pA[i]%MODULO_Q + MODULO_Q;
-    }
-    else{
-      pA[i] = pA[i]%MODULO_Q;
+      pA[i] = pA[i] + (M_TRANSPOSE[i][j]*sA[j] + 2*eA[j]);
     }
+    pA[i] = (pA[i] < 0) ? pA[i]%MODULO_Q + MODULO_Q : pA[i] % MODULO_Q;
   }
   //------- Generate Bobs parameters ----------
   int *sB = generate_gaussian_vector();
@@ -62,12 +58,7 @@
     for(j = 0; j < LATTICE_DIMENSION; j++){
       pB[i] = pB[i] + (M_TRANSPOSE[i][j]*sB[j] + 2*eB[j]);
     }
-    if(pB[i] < 0){
-      pB[i] = pB[i]%MODULO_Q + MODULO_Q;
-    }
-    else{
-      pB[i] = pB[i]%MODULO_Q;
-    }
+    pB[i] = (pB[i] < 0) ? pB[i] % MODULO_Q + MODULO_Q : pB[i] % MODULO_Q;
   }
 
   int edashA = generate_gaussian_scalar();
@@ -129,13 +120,15 @@
   }
   //Obtain a signal
   int sig = signal_function(KB, 0);
-
   //-- Obtain shared keys between Alice and Bob ----
   int SKA = robust_extractor(KA, sig);
   int SKB = robust_extractor(KB, sig);
 
   //--- Check if the keys are the same ---
   if(SKA == SKB){
+    cout << SKA << endl;
+    cout << SKB << endl;
+    cout << KA << endl;
     printf("SKA: %i\n", SKA);
     printf("SKB: %i\n", SKB);
     printf("SKA and SKB match!\n");
@@ -189,41 +182,18 @@
 }
 
 int robust_extractor(int x, int sigma){
-  return (int)((((int)x)%MODULO_Q + sigma*((MODULO_Q-1)/2)%MODULO_Q)%2);
+  cout << x%MODULO_Q + int((MODULO_Q)/2) % MODULO_Q << endl;
+  cout << int64_t((MODULO_Q/2)) << endl;
+  return ((((int)x)%MODULO_Q + int64_t(sigma * (MODULO_Q)/2)%MODULO_Q)%2);
 }
 
 bool check_robust_extractor(int x, int y){
   double delta = MODULO_Q/4 - 2;
-
-  if((x-y)%2 == 0 && abs(x-y) <= delta){
-    return true;
-  }
-  else{
-    return false;
-  }
-
+  return ((x-y)%2 == 0 && abs(x-y) <= delta);
 }
 
 int signal_function(int y, int b){
-  printf("The value of b is %i\n", b);
-  if(b == 0){
-    printf("KB is %i\n", y);
-    if(y >= -MODULO_Q/4 && y <= MODULO_Q/4){
-      return 0;
-    }
-    else{
-      return 1;
-    }
-  }
-  else if(b == 1){
-    if(y >= -MODULO_Q/4 + 1 && y <= MODULO_Q/4 + 1){
-      return 0;
-    }
-    else{
-      return 1;
-    }
-  }
-  return -1;
+  return !(y >= (double)-MODULO_Q/4 + b && y <= (double)MODULO_Q/4 + b);
 }
 
 /*------------------- Generate Gaussian numbers in C -------------------------*/
